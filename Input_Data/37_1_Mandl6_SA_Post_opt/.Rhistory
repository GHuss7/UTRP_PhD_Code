NetworkTimes <- read.csv("C:/Users/Günther/OneDrive - Stellenbosch University/Skripsie DSS/Mandl's Swiss Network/NodesTransitTimes(min).csv")
View(NetworkTimes)
View(NetworkTimes)
DistMatrix <- read.csv("C:/Users/Günther/OneDrive - Stellenbosch University/Skripsie DSS/Mandl's Swiss Network/NodesTransitTimes(min).csv")
G_Edges <- as.vector(NULL)
for( i in 1:nrow(DistMatrix - 1)) {
for(j in 1:ncol(DistMatrix - 1)) {
if(DistMatrix[i+1,j+1] < 1000) {
G_Edges <- append(G_Edges,c(i,j))
}
}
}
G_Edges <- as.vector(NULL)
for( i in 1:nrow(DistMatrix - 1)) {
for(j in 1:ncol(DistMatrix - 1)) {
if(DistMatrix[i+1,j+1] < 1000 && DistMatrix[i+1,j+1] != 0) {
G_Edges <- append(G_Edges,c(i,j))
}
}
}
G_Edges <- as.vector(NULL)
for( i in 1:nrow(DistMatrix - 1)) {
for(j in 1:ncol(DistMatrix - 1)) {
if(DistMatrix[i+1,j+1] < 1000 && DistMatrix[i+1,j+1] != 0) {
append(G_Edges,c(i,j))
}
}
}
for( i in 1:nrow(DistMatrix - 1)) {
for(j in 1:ncol(DistMatrix - 1)) {
if(DistMatrix[i+1,j+1] < 1000 & DistMatrix[i+1,j+1] != 0) {
append(G_Edges,c(i,j))
}
}
}
x<-2
DistMatrix[x+1,x+1] < 1000
i<-2
j<-2
DistMatrix[i+1,j+1] < 1000
DistMatrix[i+1,j+1] != 0
DistMatrix[i+1,j+1]
View(DistMatrix)
DistMatrix <- DistMatrix[1:nrow(DistMatrix) , 2:ncol(DistMatrix)]
for( i in 1:nrow(DistMatrix)) { # NB - Makes sure of the format of the matrix!!! add or subtract one according to right shape
for(j in 1:ncol(DistMatrix)) {
if(DistMatrix[i,j] < 1000 & DistMatrix[i,j] != 0) {
append(G_Edges,c(i,j))
}
}
}
for( i in 1:nrow(DistMatrix)) { # NB - Makes sure of the format of the matrix!!! add or subtract one according to right shape
for(j in 1:ncol(DistMatrix)) {
if(DistMatrix[i,j] < 1000 & DistMatrix[i,j] != 0) {
G_Edges <- append(G_Edges,c(i,j))
}
}
}
g1 <- graph( edges=G_Edges, n=nrow(DistMatrix), directed=F )
libNames <- c( "ggplot2", "ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "igraph")
lapply(libNames, library, character.only = TRUE) # load the required packages
g1 <- graph( edges=G_Edges, n=nrow(DistMatrix), directed=F )
plot(g1)
class(g1)
g1
simplify(G,remove.multiple = TRUE)
G <- graph( edges=G_Edges, n=nrow(DistMatrix), directed=F )
plot(G)
class(G)
G
simplify(G,remove.multiple = TRUE)
g2 <- graph( edges=c(1,2, 2,3, 3, 1), n=10 )
plot(g2)
g2
G[]
G_Edge_Weights <- as.vector(NULL)
for( i in 1:nrow(DistMatrix)) { # NB - Makes sure of the format of the matrix!!! add or subtract one according to right shape
for(j in 1:ncol(DistMatrix)) {
if(DistMatrix[i,j] < 1000 & DistMatrix[i,j] != 0) {
G_Edges <- append(G_Edges,c(i,j))
G_Edge_Weights <- DistMatrix[i,j]
}
}
}
for( i in 1:nrow(DistMatrix)) { # NB - Makes sure of the format of the matrix!!! add or subtract one according to right shape
for(j in 1:ncol(DistMatrix)) {
if(DistMatrix[i,j] < 1000 & DistMatrix[i,j] != 0) {
G_Edges <- append(G_Edges,c(i,j))
G_Edge_Weights <- append(G_Edge_Weights,DistMatrix[i,j])
}
}
}
G
simplify(G,remove.multiple = TRUE , remove.loops = TRUE , edge.attr.comb = "first")
G
simplify(G,remove.multiple = TRUE , remove.loops = TRUE , edge.attr.comb = "first")
G
G <- simplify(G,remove.multiple = TRUE , remove.loops = TRUE , edge.attr.comb = "first")
G
G[]
G <- simplify(G,remove.multiple = TRUE , remove.loops = TRUE , edge.attr.comb = "sum")
G
G[]
G <- simplify(G,remove.multiple = TRUE , remove.loops = TRUE , edge.attr.comb = "first")
G
G[]
plot(G)
