# Crossover -----
matingPool <- matingPool[,1:varNo] # get only the decision variables
cprob <- 0.7
XoverDistIdx <- 5
childAfterX <- boundedSBXover(matingPool,lowerBounds,upperBounds,cprob,XoverDistIdx)
#childAfterX
# Mutation -----
# set.seed(1234)
matingPool <- childAfterX
childAfterM <- boundedPolyMutation(matingPool,lowerBounds,upperBounds,mprob,MuDistIdx)
#childAfterM
# Combine parent and offspring populations
P_t = population[,1:varNo] # previous population
Q_t = childAfterM # offspring of previous population
R_t = rbind(P_t, Q_t)
fitness = t(apply(R_t, 1, fn))
population = cbind(R_t, fitness) # population rewritten
ranking = fastNonDominatedSorting(population[,(varNo+1):(varNo+objDim)]) # determine rank
rnkIndex <- integer(popSize)
i <- 1
while (i <= length(ranking)) {
rnkIndex[ranking[[i]]] <- i
i <- i + 1
}
population <- cbind(population,rnkIndex); # add rank
objRange <- apply(population[,(varNo+1):(varNo+objDim)], 2, max) -
apply(population[,(varNo+1):(varNo+objDim)], 2, min);
cd <- crowdingDist4frnt(population,ranking,objRange)
population <- cbind(population,apply(cd,1,sum)) # add crowding distance
population = data.frame(population)
colnames(population) <- c(1:varNo,"f1","f2","rank","cd")
population = population[with(population, order(rank)),] # sort the population
P_t_new = data.frame(matrix(ncol = length(c(1:varNo,"f1","f2","rank","cd")), nrow = 0))
colnames(P_t_new) <- c(1:varNo,"f1","f2","rank","cd")
i = 1
while (nrow(P_t_new) + sum(population$rank == i) <= popSize) { # fill up P_t_new
P_t_new = rbind(P_t_new, population[population$rank == i,])
i = i + 1
}
# Fill up the remainder of R_t
remaining_R_t = population[population$rank > max(P_t_new$rank),]
P_t_new = rbind(P_t_new,
remaining_R_t[with(remaining_R_t,order(rank,-cd)),][1:(popSize - nrow(P_t_new)),]) # sort remaining
# end first generation
t = t + 1
population = P_t_new
} # end overall generation while loop
# Plot the different fronts
plotP_t(P_t_new)
plotP_t(P_t_new[P_t_new$rank==1,])
# Plot different populations -----
# Evaluate fitness function
if (BenchMarkSwitch) {
F_t <- t(apply(childAfterM, 1, fn))
plot2Fitness(F_0,F_t)
plot2Pops(childAfterX,childAfterM,zdt2MIN)
}
varNo = 6
resultsZDT2 <- nsga2R(fn = zdt2, varNo, objDim = 2, lowerBounds = rep(0, varNo), upperBounds = rep(1, varNo),
popSize = 100, tourSize = 2, generations = 50, cprob = 0.7, XoverDistIdx = 5,
mprob = 0.2, MuDistIdx = 10)
plot(resultsZDT2$objectives)
plot(t(apply(resultsZDT2$parameters, 1, zdt2)))
# ZDT3 Benchmark (2 objectives)
varNo = 6
resultsZDT3 <- nsga2R(fn = zdt3, varNo, objDim = 2, lowerBounds = rep(0, varNo), upperBounds = rep(1, varNo),
popSize = 100, tourSize = 2, generations = 50, cprob = 0.7, XoverDistIdx = 5,
mprob = 0.2, MuDistIdx = 10)
plot(resultsZDT3$objectives)
?crowdingDist4frnt
??crowdingDist4frnt
View(childAfterM)
View(population)
View(population)
population
ranking
objRange
rnkIndex
integer(popSize)
objRange
# Geospatial data available at the geojson format
# URL: https://www.r-graph-gallery.com/327-chloropleth-map-from-geojson-with-ggplot2.html
library(geojsonio)
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
# Since it is a bit to much data, I select only a subset of it:
spdf <- spdf[ substr(spdf@data$code,1,2)  %in% c("06", "83", "13", "30", "34", "11", "66") , ]
#plot(spdf)
# I need to fortify the data AND keep trace of the commune code! (Takes ~2 minutes)
library(broom)
spdf_fortified <- tidy(spdf, region = "code")
# Now I can plot this shape easily as described before:
library(ggplot2)
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="white", color="grey") +
theme_void() +
coord_map()
# read data
data <- read.table("https://www.r-graph-gallery.com/wp-content/uploads/2017/12/data_on_french_states.csv", header=T, sep=";")
head(data)
# Distribution of the number of restaurant?
library(dplyr)
data %>%
ggplot( aes(x=nb_equip)) +
geom_histogram(bins=20, fill='skyblue', color='#69b3a2') + scale_x_log10()
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_equip, x = long, y = lat, group = group)) +
theme_void() +
coord_map()
library(geojsonio)
install.packages("geojsonio")
install.packages("broom")
install.packages("broom")
install.packages("broom")
# Geospatial data available at the geojson format
# URL: https://www.r-graph-gallery.com/327-chloropleth-map-from-geojson-with-ggplot2.html
library(geojsonio)
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
# Since it is a bit to much data, I select only a subset of it:
spdf <- spdf[ substr(spdf@data$code,1,2)  %in% c("06", "83", "13", "30", "34", "11", "66") , ]
#plot(spdf)
# I need to fortify the data AND keep trace of the commune code! (Takes ~2 minutes)
library(broom)
spdf_fortified <- tidy(spdf, region = "code")
# Now I can plot this shape easily as described before:
library(ggplot2)
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="white", color="grey") +
theme_void() +
coord_map()
# read data
data <- read.table("https://www.r-graph-gallery.com/wp-content/uploads/2017/12/data_on_french_states.csv", header=T, sep=";")
head(data)
# Distribution of the number of restaurant?
library(dplyr)
data %>%
ggplot( aes(x=nb_equip)) +
geom_histogram(bins=20, fill='skyblue', color='#69b3a2') + scale_x_log10()
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_equip, x = long, y = lat, group = group)) +
theme_void() +
coord_map()
spdf_fortified <- tidy(spdf, region = "code")
# I need to fortify the data AND keep trace of the commune code! (Takes ~2 minutes)
library(broom)
install.packages(c("backports", "bibliometrix", "boot", "callr", "car", "carData", "checkmate", "class", "cli", "colourpicker", "cowplot", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "ellipse", "ellipsis", "factoextra", "FactoMineR", "forcats", "fs", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggrepel", "glue", "graphlayouts", "haven", "hexbin", "htmltools", "httpuv", "httr", "igraph", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "lme4", "lubridate", "maptools", "MASS", "mgcv", "mime", "misc3d", "modelr", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parallelMap", "ParamHelpers", "pbkrtest", "pillar", "plotly", "plyr", "processx", "promises", "ps", "purrr", "PythonInR", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "RgoogleMaps", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "shiny", "shinycssloaders", "shinyjs", "smoof", "SnowballC", "sp", "spatial", "stringdist", "stringi", "survival", "sys", "tibble", "tidygraph", "tidyr", "tidyselect", "tikzDevice", "tinytex", "vctrs", "withr", "xfun", "xml2", "yaml", "zip"))
install.packages(c("backports", "bibliometrix", "boot", "callr", "car", "carData", "checkmate", "class", "cli", "colourpicker", "cowplot", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "ellipse", "ellipsis", "factoextra", "FactoMineR", "forcats", "fs", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggrepel", "glue", "graphlayouts", "haven", "hexbin", "htmltools", "httpuv", "httr", "igraph", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "lme4", "lubridate", "maptools", "MASS", "mgcv", "mime", "misc3d", "modelr", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parallelMap", "ParamHelpers", "pbkrtest", "pillar", "plotly", "plyr", "processx", "promises", "ps", "purrr", "PythonInR", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "RgoogleMaps", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "shiny", "shinycssloaders", "shinyjs", "smoof", "SnowballC", "sp", "spatial", "stringdist", "stringi", "survival", "sys", "tibble", "tidygraph", "tidyr", "tidyselect", "tikzDevice", "tinytex", "vctrs", "withr", "xfun", "xml2", "yaml", "zip"))
install.packages(c("backports", "bibliometrix", "boot", "callr", "car", "carData", "checkmate", "class", "cli", "colourpicker", "cowplot", "crosstalk", "data.table", "dbplyr", "dendextend", "digest", "dplyr", "DT", "ellipse", "ellipsis", "factoextra", "FactoMineR", "forcats", "fs", "ggforce", "ggplot2", "ggpubr", "ggraph", "ggrepel", "glue", "graphlayouts", "haven", "hexbin", "htmltools", "httpuv", "httr", "igraph", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "lme4", "lubridate", "maptools", "MASS", "mgcv", "mime", "misc3d", "modelr", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parallelMap", "ParamHelpers", "pbkrtest", "pillar", "plotly", "plyr", "processx", "promises", "ps", "purrr", "PythonInR", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "RgoogleMaps", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "shiny", "shinycssloaders", "shinyjs", "smoof", "SnowballC", "sp", "spatial", "stringdist", "stringi", "survival", "sys", "tibble", "tidygraph", "tidyr", "tidyselect", "tikzDevice", "tinytex", "vctrs", "withr", "xfun", "xml2", "yaml", "zip"))
# Geospatial data available at the geojson format
# URL: https://www.r-graph-gallery.com/327-chloropleth-map-from-geojson-with-ggplot2.html
library(geojsonio)
spdf <- geojson_read("https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson",  what = "sp")
# Since it is a bit to much data, I select only a subset of it:
spdf <- spdf[ substr(spdf@data$code,1,2)  %in% c("06", "83", "13", "30", "34", "11", "66") , ]
#plot(spdf)
# I need to fortify the data AND keep trace of the commune code! (Takes ~2 minutes)
library(broom)
spdf_fortified <- tidy(spdf, region = "code")
# Now I can plot this shape easily as described before:
library(ggplot2)
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="white", color="grey") +
theme_void() +
coord_map()
# read data
data <- read.table("https://www.r-graph-gallery.com/wp-content/uploads/2017/12/data_on_french_states.csv", header=T, sep=";")
head(data)
# Distribution of the number of restaurant?
library(dplyr)
data %>%
ggplot( aes(x=nb_equip)) +
geom_histogram(bins=20, fill='skyblue', color='#69b3a2') + scale_x_log10()
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_equip, x = long, y = lat, group = group)) +
theme_void() +
coord_map()
# Now I can plot this shape easily as described before:
library(ggplot2)
library(ggplot2)
ksp <- k.shortest.paths(g, 1, 10, 10)
for(i in 1:length(ksp)){
print(paste(ksp[[i]]$vert[[1]]))
print(paste(ksp[[i]][["dist"]]))
}
ksp <- k.shortest.paths(g, 1, 10, 10)
View(gpsPoints)
# Post Results Visualisation
# Load Libraries -------
list.of.packages <- c( "rstudioapi","ggplot2", "igraph","png","plotly","PythonInR","ecr","tidyverse","stringr","tkplot") # list of packages to use
new_packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # IDs new packages
if(length(new_packages)>0){install.packages(new_packages)} #installs the new packages if required
lapply(list.of.packages, library, character.only = TRUE) # load the required packages
rm(list.of.packages,new_packages) # removes the list created
# Set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # gets and sets the directory of the current script
# Load other functions and scripts -------
source("./DSS_Functions.R")
source("./DSS_Admin_Functions.R")
source("./DSS_Visualisation_Functions.R")
library(extrafont)
#font_install('fontcm')
# 0.) Define user specified parameters ----------
#problemName <- "SSML_STB_DAY_SUM_0700_1700" # NB copy this from the folders as it is used in file names
problemName <- list("Mandl_UTRP",
"Mumford0_UTRP",
"Mumford1_UTRP",
"Mumford2_UTRP",
"Mumford3_UTRP")[[3]] # NB copy this from the folders as it is used in file names
print_true = FALSE
# 1.) Load the appropriate files and data for the network ------------
# Create and format a distance matrix S
S <- read.csv(paste("./../../Input_Data/",problemName,"/Distance_Matrix.csv", sep=""))
S <- formatDistMatrix(S)
# Create and format the demand matrix
demandMatrix <- read.csv(paste("./../../Input_Data/",problemName,"/OD_Demand_Matrix.csv", sep=""))
demandMatrix <- formatDemandMatrix(demandMatrix)
# Collect the correct co-ordinates of the graph
# coords <- layout.auto(g) # to generate coordinates for graph automatically
# write.csv(coords,"MandlSwissNetworkCoords.csv") # use this to store the coords
coords <- read.csv(file = paste("./../../Input_Data/",problemName,"/Node_Coords.csv", sep=""))
coords <- as.matrix(coords)
###### THESIS FUNCTIONS #######
customGraphPlotThesis <- function(g, coords, titleName){
if(missing(titleName)){
titleName <- ""
}
plot(g,
# === vertex
vertex.size=13,
vertex.color="lightgrey",
vertex.frame.color="black",
# === vertex label
vertex.label.color="black",
#vertex.label.family="Serif", # Font family of the label (e.g."Times", "Helvetica")
vertex.label.cex=1.2,
vertex.label = 0:(nrow(coords)-1),
# === edge
edge.width = E(g)$width,
edge.arrow.size=0.3,
#edge.curved = 0.1,
# === edge label
edge.label.cex = 1.2,
edge.label.color="black",
#edge.label.family="Serif",
edge.label = E(g)$weight,
# layout
layout = coords,
main = titleName)
} # end customGraphPlotThesis
customGraphPlotLarge <- function(g, coords, titleName){
if(missing(titleName)){
titleName <- ""
}
plot(g,
# === vertex
vertex.size=4,
vertex.color="lightgrey",
vertex.frame.color="black",
# === vertex label
vertex.label.color="black",
#vertex.label.family="Serif", # Font family of the label (e.g."Times", "Helvetica")
vertex.label.cex=1.4,
vertex.label = 0:(nrow(coords)-1),
# === edge
edge.width = E(g)$width,
edge.arrow.size=0.5,
#edge.curved = 0.1,
# === edge label
edge.label.cex = 1,
edge.label.color="black",
#edge.label.family="Serif",
edge.label = E(g)$weight,
# layout
layout = coords,
main = titleName)
} # end customGraphPlotLarge
plot_and_save_route_set_thesis <- function(routes_str, fileName, dist_mx, demand_mx, coords_mx){
# function to save a normal plot in a folder
g <- createGraph(dist_mx,coords_mx)
R_routes = convertRouteStringToList(routes_str)
for(i in 1:length(R_routes)){
for (j in 1:length(R_routes[[i]])){
R_routes[[i]][j] = R_routes[[i]][j] + 1
}
}
g_R <- addAdditionalEdges(g,R_routes) # adding the bus network routes
# names(pdfFonts())
pdf(file=paste("./savedFigures/",paste(fileName, "pdf", sep = "."),sep = ""), height = 7, width = 7)
customGraphPlotThesis(g_R, coords, "") # Plots the road network
dev.off()
} # end plot_and_save_route_set_thesis
plot_and_save_route_set_folder <- function(routes_str, fileName, dist_mx, demand_mx, coords_mx, folder){
# function to save a normal plot in a folder
g <- createGraph(dist_mx,coords_mx)
R_routes = convertRouteStringToList(routes_str)
for(i in 1:length(R_routes)){
for (j in 1:length(R_routes[[i]])){
R_routes[[i]][j] = R_routes[[i]][j] + 1
}
}
g_R <- addAdditionalEdges(g,R_routes) # adding the bus network routes
# names(pdfFonts())
pdf(file=paste("./../../Figures/",folder,"/",paste(fileName, "pdf", sep = "."),sep = ""), height = 18, width = 18)
customGraphPlotLarge(g_R, coords, "") # Plots the road network
dev.off()
} # end plot_and_save_route_set_folder
###### INPUT ROUTES ######
# Rotate coordinates
if (FALSE) {
temp = coords[1:nrow(coords),2]
coords[1:nrow(coords),2] = coords[1:nrow(coords),1]
coords[1:nrow(coords),1] = temp
}
# plot_and_save_route_set_thesis("0-1-4-3-5-14-6-9-13*0-1-2-5-7-9-13-12-10-11*0-1-2-5-7-14-6-9-10-12*8-14-6-9-10-11-3-1-0*0-1-2-5-14-8*2-1-4-3-5-7-9-10-12*",
#                                "UTRP_DBMOSA_ATT_MIN",
#                                S, demandMatrix, coords)
#
# plot_and_save_route_set_thesis("12-10-9-6-14-7-5-2-1*0-1*1-3-4*8-14*11-10*13-12*",
#                                "UTRP_DBMOSA_TRT_MIN",
#                                S, demandMatrix, coords)
#
# plot_and_save_route_set_thesis("12-13-9-6-14-5-2-1-0*0-1-3-11-10-12*11-10-9-6-14-8*0-1-4-3-5-7-14-6*10-9-7-5-3-4*0-1-2-5-7-9-10-12-13*",
#                                "UTRP_NSGAII_ATT_MIN",
#                                S, demandMatrix, coords)
#
# plot_and_save_route_set_thesis("10-11*3-1-2-5-7-14-6-9-10-12*13-12*0-1*14-8*3-4*",
#                                "UTRP_NSGAII_TRT_MIN",
#                                S, demandMatrix, coords)
#
# plot_and_save_route_set_thesis("4-3-1*13-12*8-14*9-10-12*9-6-14-7-5-2-1-0*10-11*",
#                                "John_2016_best_operator_obj",
#                                S, demandMatrix, coords)
if (problemName == "SSML_STB_DAY_SUM_0700_1700" & print_true == TRUE) {
pdf(file=paste("./savedFigures/",paste("Case_study_UTRP_TRANSIT_NETWORK", "pdf", sep = "."),sep = ""), height = 7, width = 7) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotThesis(g, coords, "") # Plots the road network
dev.off()
plot_and_save_route_set_thesis("9-3-8-5-0-7-2-6*5-8-6-0-4-9-3-2-1*5-7*1-0-5-8-2*5-8-4-2-1-7-6*7-4-8-3*6-0-3-7-8-5-2*",
"Case_study_UTRP_ATT_MIN",
S, demandMatrix, coords) # f_1=3.018588598	f_2=94
plot_and_save_route_set_thesis("0-1*0-7*7-6-8*8-5*4-8*8-3*9-3*2-8*",
"Case_study_UTRP_TRT_MIN",
S, demandMatrix, coords) # f_1=7.790462175	f_2=19
plot_and_save_route_set_thesis("5-7-2-8-3-9*1-7*7-6*4-8-5*7-0*7-8*1-0*2-1-0-6-8-5*",
"Case_study_UTRP_MID_CHOICE",
S, demandMatrix, coords) # f_1=3.381915975	f_2=40
}
if (problemName == "Mandl_UTRP") {
pdf(file=paste("./savedFigures/",problemName,"/",paste("TRANSIT_NETWORK", "pdf", sep = "."),sep = ""), height = 18, width = 18) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotLarge(g, coords, "") # Plots the road network
dev.off()
plot_and_save_route_set_folder("3-1-2-5-7-14-6-9*",
"HighestDemandPerTime",
S, demandMatrix, coords, problemName)
plot_and_save_route_set_folder("0-1-4-3-11-10-12-9-7-5-2*",
"HighestDemand",
S, demandMatrix, coords, problemName)
plot_and_save_route_set_folder("1-2-5-3-11-10-12-13-9-7-14*0-1-4-3-5-2*0-1-2-5-3-11-10-12-9-7*",
"Test",
S, demandMatrix, coords, problemName)
}
if (problemName == "Mumford0_UTRP") {
pdf(file=paste("./savedFigures/",problemName,"/",paste("TRANSIT_NETWORK", "pdf", sep = "."),sep = ""), height = 18, width = 18) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotLarge(g, coords, "") # Plots the road network
dev.off()
plot_and_save_route_set_folder("8-12-19-22-0-13-6-5-21*",
"HighestDemand",
S, demandMatrix, coords, problemName)
plot_and_save_route_set_folder("17-19-22-0-18*",
"HighestDemandPerTime",
S, demandMatrix, coords, problemName)
}
if (problemName == "Mumford1_UTRP") {
pdf(file=paste("./savedFigures/",problemName,"/",paste("TRANSIT_NETWORK", "pdf", sep = "."),sep = ""), height = 18, width = 18) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotLarge(g, coords, "") # Plots the road network
dev.off()
plot_and_save_route_set_folder("2-0-23-3-66-69-38-36-45-58-33-50*",
"HighestDemandPerTime",
S, demandMatrix, coords, problemName)
plot_and_save_route_set_folder("39-18-54-36-45-41-34-51-56-8-26-49-42*",
"HighestDemand",
S, demandMatrix, coords, problemName)
}
if (problemName == "Mumford2_UTRP") {
pdf(file=paste("./savedFigures/",problemName,"/",paste("TRANSIT_NETWORK", "pdf", sep = "."),sep = ""), height = 18, width = 18) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotLarge(g, coords, "") # Plots the road network
dev.off()
plot_and_save_route_set_folder("29-43-30-26-72-79-73-106-57-10-52-100-18-9-19-33-99-69*",
"HighestDemandPerTime",
S, demandMatrix, coords, problemName)
plot_and_save_route_set_folder("29-43-30-26-72-79-73-106-57-10-52-100-18-9-19-33-99-69*",
"HighestDemand",
S, demandMatrix, coords, problemName)
}
if (problemName == "Mumford3_UTRP" & print_true == TRUE) {
pdf(file=paste("./savedFigures/",problemName,"/",paste("TRANSIT_NETWORK", "pdf", sep = "."),sep = ""), height = 18, width = 18) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotLarge(g, coords, "") # Plots the road network
dev.off()
plot_and_save_route_set_folder("78-96-71-100-3-115-106-14-53-23-114*",
"HighestDemandPerTime",
S, demandMatrix, coords, problemName)
plot_and_save_route_set_folder("17-43-109-86-24-5-80-66-74-114-16-55-60-32-20*",
"HighestDemand",
S, demandMatrix, coords, problemName)
}
if (problemName == "Mumford1_UTRP") {
if(F){
#"""Function to set the coordinates for the instances"""
g <- createGraph(S)
tk_plot_id <- tkplot(g,
vertex.size=13,
vertex.color="lightgrey",
vertex.frame.color="black",
# === vertex label
vertex.label.color="black",
#vertex.label.family="Serif", # Font family of the label (e.g."Times", "Helvetica")
vertex.label.cex=1.2,
vertex.label = 0:(nrow(S)-1),
# === edge
edge.width = E(g)$width,
edge.arrow.size=0.3,
#edge.curved = 0.1,
# === edge label
edge.label.cex = 1.2,
edge.label.color="black",
#edge.label.family="Serif",
edge.label = E(g)$weight
# layout
#layout = plot_coords
)
plot_coords = norm_coords(tk_coords(tk_plot_id))
if(FALSE){
write.csv(plot_coords, file=paste("./../../Input_Data/",problemName,"/Node_Coords_own.csv", sep=""), row.names = F, col.names = c("V1","V2"))
}
} # end overall if(F)
}
if (problemName == "Mumford0_UTRP") {
plot_and_save_route_set_thesis("4-24*23-9-3-24-7-27-15-10-6-13-0-12-8*2-15*5-6-13-18-0-22-17-11-3-1-9*10-21-6-16-7-14-23-3-1*25-28*17-19*12-8-19-18-0-25-7-20-4*4-24-14-11-17-12-8*23-20-14*9-23*2-29-27-16-28-17-22-0-26*
", "Mumford0_attempt", S, demandMatrix, coords) # f_1, f_2 = 17.25575754	225
}
############ K SHORTEST PATHS
# find k shortest paths
k.shortest.paths <- function(graph, from, to, k){
# first shortest path
k0 <- get.shortest.paths(graph,from,to, output='both')
# number of currently found shortest paths
kk <- 1
# list of alternatives
variants <- list()
# shortest variants
shortest.variants <- list(list(g=graph, path=k0$epath, vert=k0$vpath, dist=shortest.paths(graph,from,to)))
# until k shortest paths are found
while(kk<k){
# take last found shortest path
last.variant <- shortest.variants[[length(shortest.variants)]]
# calculate all alternatives
variants <- calculate.variants(variants, last.variant, from, to)
# find shortest alternative
sp <- select.shortest.path(variants)
# add to list, increase kk, remove shortest path from list of alternatives
shortest.variants[[length(shortest.variants)+1]] <- list(g=variants[[sp]]$g, path=variants[[sp]]$variants$path, vert=variants[[sp]]$variants$vert, dist=variants[[sp]]$variants$dist)
kk <- kk+1
variants <- variants[-sp]
}
return(shortest.variants)
}
# found all alternative routes
calculate.variants <- function(variants, variant, from, to){
# take graph from current path
g <- variant$g
# iterate through edges, removing one each iterations
for (j in unlist(variant$path)){
newgraph <- delete.edges(g, j) # remove adge
sp <- get.shortest.paths(newgraph,from,to, output='both') # calculate shortest path
spd <- shortest.paths(newgraph,from,to) # calculate length
if (spd != Inf){ # the the path is found
if (!contains.path(variants, sp$vpath)) # add to list, unless it already contains the same path
{
variants[[length(variants)+1]] <- list(g=newgraph, variants=list(path=sp$epath, vert=sp$vpath, dist=spd))
}
}
}
return(variants)
}
# does a list contain this path?
contains.path <- function(variants, variant){
return( any( unlist( lapply( variants, function(x){ identical(x$variant$vert,variant) } ) ) ) )
}
# which path from the list is the shortest?
select.shortest.path <- function(variants){
return( which.min( unlist( lapply( variants, function(x){x$variants$dist} ) ) ) )
}
g <- createGraph(S,coords)
ksp <- k.shortest.paths(g, 1, 10, 10)
for(i in 1:length(ksp)){
print(paste(ksp[[i]]$vert[[1]]))
print(paste(ksp[[i]][["dist"]]))
}
ksp <- k.shortest.paths(g, 32+1, 42+1, 10)
for(i in 1:length(ksp)){
print(paste(ksp[[i]]$vert[[1]]))
print(paste(ksp[[i]][["dist"]]))
}
ksp <- k.shortest.paths(g, 19+1, 42+1, 10)
for(i in 1:length(ksp)){
print(paste(ksp[[i]]$vert[[1]]))
print(paste(ksp[[i]][["dist"]]))
}
