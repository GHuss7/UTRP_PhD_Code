shortenedCandidateRoutes <- specifyNodesPerRoute(shortestRoutes,3,5)
# Generate a candidate Route Set----------------------
x <- generateCandidateRoutes(shortenedCandidateRoutes, 4)
feasibilityConnectedRoutes(x,nrow(S)) # Test the feasibility of the routes generated for connectedness and all inclusion
numAllowedRoutes <- 5 # enter the number of allowed routes
for(i in 1:nrow(S)) {
x <- generateFeasibleSolution(shortenedCandidateRoutes, numAllowedRoutes, nrow(S), 10000 )
if(is.null(x)) { # tests if the solution was feasible, if not, leverage the
# constraint by adding one more allowable route
numAllowedRoutes <- numAllowedRoutes + 1
}
else{
if(feasibilityConnectedRoutes(x,nrow(S))){
break
}
}
} # end for
generateFeasibleSolution <- function(candidateRoutes, numAllowedRoutes, N, iterations){
for(i in 1:N) {
x <- generateSolution(candidateRoutes, numAllowedRoutes, N, iterations )
if(is.null(x)) { # tests if the solution was feasible, if not, leverage the
# constraint by adding one more allowable route
numAllowedRoutes <- numAllowedRoutes + 1
}
else{
if(feasibilityConnectedRoutes(x,N)){
break
}
}
} # end for
return(x)
}
generateSolution <- function(canditateRoutes, M, N , iterations){
# candidate routes are the set of all possible routes one can choose from
# M is the number of routes you want generated
# N is the number of nodes in the network
# iterations are the iterations that should be performed
for(i in 1:iterations) {
x<- generateCandidateRoutes(canditateRoutes, M)
if(feasibilityConnectedRoutes(x,N)) {
return(x)
}
} # end for loop
return(NULL) # if a feasible solution is not generated
}
# DSS Main
# Prerequisites ----
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Functions.R")
setwd("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS")
libNames <- c( "ggplot2", "ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "igraph")
# install.packages(x) # warning: uncommenting this may take a number of minutes
lapply(libNames, library, character.only = TRUE) # load the required packages
rm(libNames)
#### http://kateto.net/networks-r-igraph
# Create a distance matrix S.--------------
# Set all the impossible connections between nodes to a large number.
# Because the algorithm is looking for a minimum, very large distances will never be selected
S <- read.csv("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/Mandl's Swiss Network/NodesTransitTimes(min).csv")
## Format S in correct matrix format =========
S <- S[1:nrow(S) , 2:ncol(S)]
S <- as.matrix(S)
colnames(S) <- rownames(S) <- 1:nrow(S)
# Create the demand matrix -------------
demandMatrix <- read.csv("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/Mandl's Swiss Network/TransitdemandMatrix.csv")
# Format demandMatrix in correct matrix format =========
demandMatrix <- demandMatrix[1:nrow(demandMatrix) , 2:ncol(demandMatrix)]
demandMatrix <- as.matrix(demandMatrix)
colnames(demandMatrix) <- rownames(demandMatrix) <- 1:nrow(demandMatrix)
# Determine the all shortest routes------------
shortestRoutes <- generateAllShortestRoutes(S)
# Calculate the shortest distance matrix for the candidate routes-----------------------
shortDistMatrix <- generateShortestDistMatrix(S,shortestRoutes)
# Create a shortened list and remove the routes longer than the specified number ----------
shortenedCandidateRoutes <- specifyNodesPerRoute(shortestRoutes,3,5)
# Generate a feasible solution in terms of connectedness --------
numAllowedRoutes <- 5 # enter the number of allowed routes
# this value should be higher than 4 as 4 routes of 4 nodes as are
# difficult to get a feasible solution for
# a good general idea (Gunther) is to choose numNodes
x <- generateFeasibleSolution(shortenedCandidateRoutes,4,nrow(S),10000)
# Calculate the time cost of each route
routeCostMatrix <- matrix(0,nrow(S),ncol(S))
for(i in 1:length(x)) {
path <- x[[i]]
dist <- 0
for (i in 1:(length(path)-1) ) {
dist <- dist + S[path[i] , path[i+1]]
}
routeCostMatrix[path[1],path[length(path)]] <- routeCostMatrix[path[length(path)],path[1]] <- dist
}
rm(dist,path,i)
# Calculate the allowed distances in the bus network only
busNetworkDistMatrix <- matrix(max(S),nrow(S),ncol(S))
for(i in 1:length(x)) {
for(j in 1:(length(x[[i]]) - 1) ) {
busNetworkDistMatrix[x[[i]][j] , x[[i]][j+1]] <- busNetworkDistMatrix[x[[i]][j+1] , x[[i]][j]] <- S[x[[i]][j] , x[[i]][j+1]]
}
}
formattedRoutes <- as.list(NULL)
for(i in 1:length(x)) {
formattedRoutes[[i]] <- paste(x[[i]],sep = "", collapse = "-")
}
# Visualise the graph and routes --------
## Set matrix in correct format - make sure of this!!!!
distMatrix <- S
infeasibleDist <- max(S)
for( i in 1:nrow(distMatrix)) { # NB - Makes sure of the format of the matrix!!! add or subtract one according to right shape
for(j in 1:ncol(distMatrix)) {
if(distMatrix[i,j] == infeasibleDist) {
distMatrix[i,j] <- 0
}
}
}
rm(i,j,infeasibleDist)
g <- graph.adjacency(distMatrix, weighted=TRUE, mode = "undirected")
# coords <- layout.auto(g) # to generate coordinates for graph automatically
# write.csv(coords,"MandlSwissNetworkCoords.csv") # use this to store the coords
coords <- read.csv(file = "MandlSwissNetworkCoords.csv")
coords <- as.matrix(coords)
# plot(g,layout = coords)
E(g)$color <- "black"
# Adding additional edges to represent the routes -------
# colourNames <- sample(colors() , length(x) , replace = FALSE)
colourNames <- c("red","green","maroon","blueviolet","brown1","orange","pink","purple","magenta","lightgreen")
for(i in 1:length(x)) {
for(j in 1:(length(x[[i]]) - 1) ) {
g <- add.edges(g , c(x[[i]][j] , x[[i]][j+1]) , attr=list(color=colourNames[i] ))
}
}
rm(i,j,colourNames)
# Plot the graph with the specialised features -------
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords)
View(busNetworkDistMatrix)
View(routeCostMatrix)
View(routeCostMatrix)
busNetworkDistMatrix <- matrix(max(S),nrow(S),ncol(S))
for(i in 1:length(x)) {
for(j in 1:(length(x[[i]]) - 1) ) {
busNetworkDistMatrix[x[[i]][j] , x[[i]][j+1]] <- busNetworkDistMatrix[x[[i]][j+1] , x[[i]][j]] <- S[x[[i]][j] , x[[i]][j+1]]
}
}
View(busNetworkDistMatrix)
df <- data.frame(a = c(0,1,2,3,4),b = c(3,4,5,6,7))
nod <- data.frame(node = c(0:7),wt = c(1:8))
pg <- graph_from_data_frame(d = df, vertices = nod,directed = F)
plot(pg, edge.label = nod$wt)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$wt)
E(g)$wt
E(g)
g
g[]
g <- graph.adjacency(distMatrix, weighted=TRUE, mode = "undirected")
g[]
g[][1,2]
g[][1,3]
S
wt <- as.vector(NULL)
for(i in 1:nrow(S)){
for(j in 1:nrow(S)){
if(i>j & g[][i,j] != 0){
wt <-g[][i,j]
}
}
}
wt <- as.vector(NULL)
for(i in 1:nrow(S)){
for(j in 1:nrow(S)){
if(i>j & g[][i,j] != 0){
wt <- c(wt , g[][i,j])
}
}
}
g
E(g)$weight <- wt
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight, edge.label.size = 0.5)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight, edge.label.size = 0.1)
formattedRoutes <- as.list(NULL)
for(i in 1:length(x)) {
formattedRoutes[[i]] <- paste(x[[i]],sep = "", collapse = "-")
}
# Visualise the graph and routes --------
## Set matrix in correct format - make sure of this!!!!
distMatrix <- S
infeasibleDist <- max(S)
for( i in 1:nrow(distMatrix)) { # NB - Makes sure of the format of the matrix!!! add or subtract one according to right shape
for(j in 1:ncol(distMatrix)) {
if(distMatrix[i,j] == infeasibleDist) {
distMatrix[i,j] <- 0
}
}
}
rm(i,j,infeasibleDist)
g <- graph.adjacency(distMatrix, weighted=TRUE, mode = "undirected")
wt <- as.vector(NULL)
for(i in 1:nrow(S)){
for(j in 1:nrow(S)){
if(i>j & g[][i,j] != 0){
wt <- c(wt , g[][i,j])
}
}
}
E(g)$weight <- wt
# coords <- layout.auto(g) # to generate coordinates for graph automatically
# write.csv(coords,"MandlSwissNetworkCoords.csv") # use this to store the coords
coords <- read.csv(file = "MandlSwissNetworkCoords.csv")
coords <- as.matrix(coords)
# plot(g,layout = coords)
E(g)$color <- "black"
# Adding additional edges to represent the routes -------
# colourNames <- sample(colors() , length(x) , replace = FALSE)
colourNames <- c("red","green","maroon","blueviolet","brown1","orange","pink","purple","magenta","lightgreen")
for(i in 1:length(x)) {
for(j in 1:(length(x[[i]]) - 1) ) {
g <- add.edges(g , c(x[[i]][j] , x[[i]][j+1]) , attr=list(color=colourNames[i] ))
}
}
rm(i,j,colourNames)
# Plot the graph with the specialised features -------
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
View(S)
View(busNetworkDistMatrix)
busNetworkDistMatrix <- matrix(max(S),nrow(S),ncol(S))
for(i in 1:length(x)) {
for(j in 1:(length(x[[i]]) - 1) ) {
busNetworkDistMatrix[x[[i]][j] , x[[i]][j+1]] <- busNetworkDistMatrix[x[[i]][j+1] , x[[i]][j]] <- S[x[[i]][j] , x[[i]][j+1]]
}
}
createGraph <- function(distMatrix , coords){
# make sure the distMatrix is in correct nxn as.matrix(distMatrix) [1:n,1:n] format
## Set matrix in correct format - make sure of this!!!!
infeasibleDist <- max(distMatrix)
for( i in 1:nrow(distMatrix)) { # NB - Makes sure of the format of the matrix!!! add or subtract one according to right shape
for(j in 1:ncol(distMatrix)) {
if(distMatrix[i,j] == infeasibleDist) {
distMatrix[i,j] <- 0
}
}
}
# Create the graph from the adjacency matrix
g <- graph.adjacency(distMatrix, weighted=TRUE, mode = "undirected")
# Create a weight vector from the adjacency matrix to apply as weights
wt <- as.vector(NULL)
for(i in 1:nrow(distMatrix)){
for(j in 1:nrow(distMatrix)){
if(i>j & g[][i,j] != 0){
wt <- c(wt , g[][i,j])
}
}
} # end for
# Assign the weights to the graphm
E(g)$weight <- wt
# plot(g,layout = coords)
E(g)$color <- "black"
return(g)
} # end createGraph function
g <- createGraph(busNetworkDistMatrix,coords)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
g <- createGraph(distMatrix,coords)
g <- createGraph(distMatrix,coords)
gb <- createGraph(busNetworkDistMatrix,coords)
addAdditionalEdges <- function(g,R){
# Adding additional edges to represent the routes -------
# colourNames <- sample(colors() , length(x) , replace = FALSE)
colourNames <- c("red","green","maroon","blueviolet","brown1","orange","pink","purple","magenta","lightgreen")
for(i in 1:length(R)) {
for(j in 1:(length(R[[i]]) - 1) ) {
g <- add.edges(g , c(R[[i]][j] , R[[i]][j+1]) , attr=list(color=colourNames[i] ))
}
}
}
addAdditionalEdges <- function(g,R){
# Adding additional edges to represent the routes -------
# colourNames <- sample(colors() , length(x) , replace = FALSE)
colourNames <- c("red","green","maroon","blueviolet","brown1","orange","pink","purple","magenta","lightgreen")
for(i in 1:length(R)) {
for(j in 1:(length(R[[i]]) - 1) ) {
g <- add.edges(g , c(R[[i]][j] , R[[i]][j+1]) , attr=list(color=colourNames[i] ))
}
}
return(g)
}
addAdditionalEdges(g,x)
g <- addAdditionalEdges(g,x)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
g <- createGraph(distMatrix,coords)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
View(distMatrix)
g <- createGraph(S,coords)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
g <- addAdditionalEdges(g,x)
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
customisedGraphPlot <- function(g){
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
}
customGraphPlot <- function(g){
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight)
}
customGraphPlot(g)
customGraphPlot(gb)
g <- createGraph(S,coords)
customGraphPlot(g)
customGraphPlot(gb)
customGraphPlot(gb)
customGraphPlot(g)
customGraphPlot(gb)
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Main.R")
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Visualisation_Functions.R")
formattedRoutes <- as.list(NULL)
for(i in 1:length(x)) {
formattedRoutes[[i]] <- paste(x[[i]],sep = "", collapse = "-")
}
coords <- read.csv(file = "MandlSwissNetworkCoords.csv")
coords <- as.matrix(coords)
g <- createGraph(S,coords)
gb <- createGraph(busNetworkDistMatrix,coords)
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g) # Plots the road network
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Main.R")
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Visualisation_Functions.R")
# Format the routes in the correct format -------
formattedRoutes <- as.list(NULL)
for(i in 1:length(x)) {
formattedRoutes[[i]] <- paste(x[[i]],sep = "", collapse = "-")
}
# Visualise the graph and routes --------
# Collect the correct co-ordinates of the graph =============
# coords <- layout.auto(g) # to generate coordinates for graph automatically
# write.csv(coords,"MandlSwissNetworkCoords.csv") # use this to store the coords
coords <- read.csv(file = "MandlSwissNetworkCoords.csv")
coords <- as.matrix(coords)
# Create a graph of the main network
g <- createGraph(S,coords)
gb <- createGraph(busNetworkDistMatrix,coords)
# Adding additional edges to represent the routes -------
g <- addAdditionalEdges(g,x) # adding the bus network routes
# Plot the graph with the specialised features -------
customGraphPlot(g) # Plots the road network
customGraphPlot(gb) # Plots the bus network
customGraphPlot(gb) # Plots the bus network
g <- createGraph(S,coords)
customGraphPlot(g) # Plots the road network
gb <- createGraph(busNetworkDistMatrix,coords)
customGraphPlot(gb) # Plots the bus network
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g) # Plots the road network
system.time(
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Main.R")
) # end system.time test
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Visualisation_Functions.R")
system.time(
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Main.R")
) # end system.time test
source("C:/Users/G端nther/OneDrive - Stellenbosch University/Skripsie DSS/DSS/DSS_Visualisation_Functions.R")
formattedRoutes <- formatRoutes(x)
coords <- read.csv(file = "MandlSwissNetworkCoords.csv")
coords <- as.matrix(coords)
g <- createGraph(S,coords)
customGraphPlot(g) # Plots the road network
gb <- createGraph(busNetworkDistMatrix,coords)
customGraphPlot(gb) # Plots the bus network
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g) # Plots the road network
gb <- addAdditionalEdges(gb,x) # adding the bus network routes
customGraphPlot(gb) # Plots the road network
customGraphPlot(g) # Plots the road network
mypath <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University","Skripsie DSS","DSS","Plots",paste("plot_","roadNetwork", ".jpg", sep = ""))
customGraphPlot <- function(g , titleName){
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight,
main = titleName)
}
customGraphPlot <- function(g , titleName){
if(missing(titleName)){
titleName <- ""
}
plot(g, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8,
layout = coords,
edge.label = E(g)$weight,
main = titleName)
}
customGraphPlot(g) # Plots the road network
customGraphPlot(gb,"Bus Network") # Plots the bus network
customGraphPlot(g,"Bus network on road network") # Plots the road network
customGraphPlot(g,"Road Network") # Plots the road network
gb <- createGraph(busNetworkDistMatrix,coords)
customGraphPlot(gb,"Bus Network") # Plots the bus network
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g) # Plots the road network
gb <- addAdditionalEdges(gb,x) # adding the bus network routes
customGraphPlot(gb) # Plots the road network
fileName <- "roadNetwork"
mypath <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University","Skripsie DSS","DSS","Plots",paste(fileName, ".jpg", sep = ""))
jpg(file=mypath)
customGraphPlot(g,"Road Network")
library("jpeg", lib.loc="~/R/win-library/3.4")
libNames <- c( "ggplot2", "ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "igraph","jpeg")
lapply(libNames, library, character.only = TRUE) # load the required packages
rm(libNames)
fileName <- "roadNetwork"
mypath <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University","Skripsie DSS","DSS","Plots",paste(fileName, ".jpg", sep = ""))
jpg(file=mypath)
jpeg(file=mypath)
customGraphPlot(g,"Road Network")
dev.off()
libNames <- c( "ggplot2", "ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap", "igraph","png")
lapply(libNames, library, character.only = TRUE) # load the required packages
rm(libNames)
detach("package:jpeg", unload=TRUE)
mypath <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University","Skripsie DSS","DSS","Plots",paste(fileName, ".jpg", sep = ""))
png(file=mypath)
customGraphPlot(g,"Road Network")
dev.off()
fileName <- "roadNetwork"
fileName <- "roadNetwork"
mypath <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University","Skripsie DSS","DSS","Plots",paste(fileName, ".jpg", sep = ""))
png(file=mypath)
customGraphPlot(g,"Road Network")
dev.off()
mypath <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University","Skripsie DSS","DSS","Plots",paste(fileName, ".png", sep = ""))
png(file=mypath)
customGraphPlot(g,"Road Network")
dev.off()
customGraphPlot(g,"Road Network")
dev.copy(png,'myplot.png')
dev.off()
setwd(mypath)
mypath
wd <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University","Skripsie DSS","DSS","Plots")
setwd(wd)
customGraphPlot(g,"Road Network")
dev.copy(png,'myplot.png')
saveInPlotsFolder <- function(g,fileName){
mypath <- file.path("C:","Users","G端nther","OneDrive - Stellenbosch University",
"Skripsie DSS","DSS","Plots",paste(fileName, ".png", sep = ""))
png(file=mypath)
customGraphPlot(g)
dev.off()
}
saveInPlotsFolder(g,"Road network")
customGraphPlot(g,"Road Network") # Plots the road network
saveInPlotsFolder(g,"roadNetwork")
g <- createGraph(S,coords)
customGraphPlot(g,"Road Network") # Plots the road network
saveInPlotsFolder(g,"roadNetwork") # Saves the plot into a folder
gb <- createGraph(busNetworkDistMatrix,coords)
customGraphPlot(gb,"Bus Network") # Plots the bus network
saveInPlotsFolder(gb,"busNetwork")
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g) # Plots the road network
saveInPlotsFolder(g,"busRoutesOnRoadNetwork")
gb <- addAdditionalEdges(gb,x) # adding the bus network routes
customGraphPlot(gb) # Plots the road network
saveInPlotsFolder(gb,"busRoutesOnly")
customGraphPlot(g)
customGraphPlot(g,"hello")
