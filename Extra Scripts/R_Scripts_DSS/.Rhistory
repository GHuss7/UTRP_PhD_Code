View(childAfterM)
View(population)
View(population)
population
ranking
objRange
rnkIndex
integer(popSize)
objRange
###### THESIS FUNCTIONS #######
customGraphPlotThesis <- function(g, coords, titleName, print_edge_labels){
if(missing(titleName)){
titleName <- ""
}
plot(g,
# === vertex
vertex.size=13,
vertex.color="lightgrey",
vertex.frame.color="black",
# === vertex label
vertex.label.color="black",
#vertex.label.family="Serif", # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.cex=1.2,
# === edge
edge.width = E(g)$width,
edge.arrow.size=0.3,
#edge.curved = 0.1,
# === edge label
edge.label.cex = 1.2,
edge.label.color="black",
#edge.label.family="Serif",
edge.label = ifelse(print_edge_labels, E(g)$weight, ""),
# layout
layout = coords,
main = titleName)
} # end customGraphPlotThesis
plot_and_save_route_set_thesis <- function(routes_str, fileName, dist_mx, demand_mx, coords_mx){
# function to save a normal plot in a folder
g <- createGraph(dist_mx,coords_mx)
R_routes = convertRouteStringToList(routes_str)
for(i in 1:length(R_routes)){
for (j in 1:length(R_routes[[i]])){
R_routes[[i]][j] = R_routes[[i]][j] + 1
}
}
g_R <- addAdditionalEdges(g,R_routes) # adding the bus network routes
# names(pdfFonts())
pdf(file=paste("./Thesis_plots/",paste(fileName, "pdf", sep = ".")), height = 7, width = 7)
customGraphPlotThesis(g_R, coords, "", FALSE) # Plots the road network
dev.off()
} # end plot_and_save_route_set_thesis
###### INPUT ROUTES ######
pdf(file=paste("./Thesis_plots/",paste("UTRP_TRANSIT_NETWORK_plot", "pdf", sep = ".")), height = 7, width = 7) # fonts = "fontcm"
g <- createGraph(dist_mx,coords_mx)
customGraphPlotThesis(g, coords, "", TRUE) # Plots the road network
dev.off()
plot_and_save_route_set_thesis("0-1-4-3-5-14-6-9-13*0-1-2-5-7-9-13-12-10-11*0-1-2-5-7-14-6-9-10-12*8-14-6-9-10-11-3-1-0*0-1-2-5-14-8*2-1-4-3-5-7-9-10-12*",
"UTRP_DBMOSA_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-10-9-6-14-7-5-2-1*0-1*1-3-4*8-14*11-10*13-12*",
"UTRP_DBMOSA_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-13-9-6-14-5-2-1-0*0-1-3-11-10-12*11-10-9-6-14-8*0-1-4-3-5-7-14-6*10-9-7-5-3-4*0-1-2-5-7-9-10-12-13*",
"UTRP_NSGAII_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("10-11*3-1-2-5-7-14-6-9-10-12*13-12*0-1*14-8*3-4*",
"UTRP_NSGAII_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("4-3-1*13-12*8-14*9-10-12*9-6-14-7-5-2-1-0*10-11*",
"John_2016_best_operator_obj",
S, demandMatrix, coords)
source('C:/Users/17832020/OneDrive - Stellenbosch University/Academics 2019 MEng/DSS/DSS Main/Extra Scripts/R_Scripts_DSS/DSS_Visualisation_Post_Python.R')
###### THESIS FUNCTIONS #######
customGraphPlotThesis <- function(g, coords, titleName, print_edge_labels){
if(missing(titleName)){
titleName <- ""
}
plot(g,
# === vertex
vertex.size=13,
vertex.color="lightgrey",
vertex.frame.color="black",
# === vertex label
vertex.label.color="black",
#vertex.label.family="Serif", # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.cex=1.2,
# === edge
edge.width = E(g)$width,
edge.arrow.size=0.3,
#edge.curved = 0.1,
# === edge label
edge.label.cex = 1.2,
edge.label.color="black",
#edge.label.family="Serif",
edge.label = ifelse(print_edge_labels, E(g)$weight, ""),
# layout
layout = coords,
main = titleName)
} # end customGraphPlotThesis
plot_and_save_route_set_thesis <- function(routes_str, fileName, dist_mx, demand_mx, coords_mx){
# function to save a normal plot in a folder
g <- createGraph(dist_mx,coords_mx)
R_routes = convertRouteStringToList(routes_str)
for(i in 1:length(R_routes)){
for (j in 1:length(R_routes[[i]])){
R_routes[[i]][j] = R_routes[[i]][j] + 1
}
}
g_R <- addAdditionalEdges(g,R_routes) # adding the bus network routes
# names(pdfFonts())
pdf(file=paste("./Thesis_plots/",paste(fileName, "pdf", sep = ".")), height = 7, width = 7)
customGraphPlotThesis(g_R, coords, "", FALSE) # Plots the road network
dev.off()
} # end plot_and_save_route_set_thesis
###### INPUT ROUTES ######
pdf(file=paste("./Thesis_plots/",paste("UTRP_TRANSIT_NETWORK_plot", "pdf", sep = ".")), height = 7, width = 7) # fonts = "fontcm"
g <- createGraph(dist_mx,coords_mx)
customGraphPlotThesis(g, coords, "", TRUE) # Plots the road network
dev.off()
plot_and_save_route_set_thesis("0-1-4-3-5-14-6-9-13*0-1-2-5-7-9-13-12-10-11*0-1-2-5-7-14-6-9-10-12*8-14-6-9-10-11-3-1-0*0-1-2-5-14-8*2-1-4-3-5-7-9-10-12*",
"UTRP_DBMOSA_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-10-9-6-14-7-5-2-1*0-1*1-3-4*8-14*11-10*13-12*",
"UTRP_DBMOSA_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-13-9-6-14-5-2-1-0*0-1-3-11-10-12*11-10-9-6-14-8*0-1-4-3-5-7-14-6*10-9-7-5-3-4*0-1-2-5-7-9-10-12-13*",
"UTRP_NSGAII_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("10-11*3-1-2-5-7-14-6-9-10-12*13-12*0-1*14-8*3-4*",
"UTRP_NSGAII_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("4-3-1*13-12*8-14*9-10-12*9-6-14-7-5-2-1-0*10-11*",
"John_2016_best_operator_obj",
S, demandMatrix, coords)
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
#print( getwd() )# set wd to current file location
# source("./DSS_Main.R")
source("./DSS_Visualisation_Functions.R")
# Load other functions and scripts -------
source("./DSS_Functions.R")
source("./DSS_Admin_Functions.R")
source("./DSS_Visualisation_Functions.R")
library(extrafont)
font_install('fontcm')
problemName <- "Mandl_Data" # NB copy this from the folders as it is used in file names
# Create the folder for the results to be stored
resultsDir = paste("./Results/Results_",substr(Sys.time(),1,10),"_",problemName,"_","Routes_0", sep = "")
resultsDir = createResultsDirectory(resultsDir) # creates a new results directory
# Enter the number of allowed routes
numAllowedRoutes <- 6 # (aim for > [numNodes N ]/[maxNodes in route])
minNodes <- 3 # minimum nodes in a route
maxNodes <- 10 # maximum nodes in a route
# Set if archives, workspaces should be saved or loaded
loadArchive <- FALSE
loadWorkspace <- FALSE
saveArchive <- TRUE
saveWorkspace <- TRUE
loadSpecificArchive <- FALSE
loadSpecificWorkspace <- FALSE
initialiseTemperature <- TRUE
optimiseFurther <- TRUE
# 1.) Load the appropriate files and data for the network ------------
# Create and format a distance matrix S
S <- read.csv(paste("./Input_Data/",problemName,"/Distance_Matrix.csv", sep=""))
S <- formatDistMatrix(S)
# Create and format the demand matrix
demandMatrix <- read.csv(paste("./Input_Data/",problemName,"/OD_Demand_Matrix.csv", sep=""))
demandMatrix <- formatDemandMatrix(demandMatrix)
# Collect the correct co-ordinates of the graph
# coords <- layout.auto(g) # to generate coordinates for graph automatically
# write.csv(coords,"MandlSwissNetworkCoords.csv") # use this to store the coords
coords <- read.csv(file = paste("./Input_Data/",problemName,"/Node_Coords.csv", sep=""))
coords <- as.matrix(coords)
# Format the routes in the correct format -------
formattedRoutes <- formatRoutes(x)
# Format a Matrix for latex
RMatrix <- demandMatrix
formatMatrix(RMatrix)
# Visualise the graph and routes --------
# Collect the correct co-ordinates of the graph =============
# coords <- layout.auto(g) # to generate coordinates for graph automatically
# write.csv(coords,"MandlSwissNetworkCoords.csv") # use this to store the coords
coords <- read.csv(file = "./Input_Data/Mandl_Data/Node_Coords.csv")
coords <- as.matrix(coords)
# Create and plot a graph of the main network ----------
g <- createGraph(S,coords)
customGraphPlot(g,"Road network") # Plots the road network
saveInPlotsFolder(g,"roadNetwork") # Saves the plot into a folder
# Create and plot a graph of the bus network ----------
gb <- createGraph(busNetworkDistMatrix,coords)
customGraphPlot(gb,"Bus network") # Plots the bus network
saveInPlotsFolder(gb,"busNetwork")
# Adding additional edges to represent the bus routes on the road network -------
g2 <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g2,"Bus routes on road network") # Plots the road network
saveInPlotsFolder(g2,"busRoutesOnRoadNetwork")
gb <- addAdditionalEdges(gb,x) # adding the bus network routes
customGraphPlot(gb,"Bus routes only") # Plots the road network
saveInPlotsFolder(gb,"busRoutesOnly")
# Visualisation Example: ------
# Generate Bus Route Network
# Generate Bus Network Dist Matrix
busNetworkDistMatrix <- generateBusNetworkDistMatrix(S,x)
# Determine all shortest routes in the Bus network from one node to another
shortestBusRoutes <- generateAllShortestRoutes(busNetworkDistMatrix)
# Calculate the shortest distance matrix for the candidate bus routes
shortBusDistMatrix <- calculateRouteLengths(busNetworkDistMatrix,shortestBusRoutes)
# Visualise the graph and routes
# Create and plot a graph of the main network
g <- createGraph(S,coords)
customGraphPlot(g,"") # Plots the road network
# Adding additional edges to represent the bus routes on the road network
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g,"") # Plots the road network
# Interactive tkplot:
# tkplot(g,600,600, edge.arrow.size=0.3, vertex.color="gold", vertex.size=15,
#      vertex.frame.color="gray", vertex.label.color="black",
#      vertex.label.cex=0.8,
#      layout = coords,
#      edge.label = E(g)$weight,
#      edge.width = E(g)$width)
# Visualise attainment fronts------
# Save the plot
fileName <- paste("paretoFrontOf",numAllowedRoutes,"Routes", sep = "")
mypath <- file.path("C:","Users","Günther","OneDrive - Stellenbosch University",
"Skripsie DSS","DSS","Plots",paste(fileName, ".png", sep = ""))
png(file=mypath)
myPlot
dev.off()
myPlot <- plotParetoFront(archiveList[[1]])
myPlot
ggplot() +
geom_point(data = createArchiveDF(archiveList[[1]]), aes(x = f1, y = f2), color = "red") +
geom_point(data = createArchiveDF(archiveList[[2]]), aes(x = f1, y = f2), color = "blue") +
geom_point(data = createArchiveDF(archiveList[[3]]), aes(x = f1, y = f2), color = "green") +
geom_point(data = createArchiveDF(archiveList[[4]]), aes(x = f1, y = f2), color = "orange") +
geom_point(data = createArchiveDF(archiveList[[5]]), aes(x = f1, y = f2), color = "pink") +
geom_point(data = createArchiveDF(archiveList[[6]]), aes(x = f1, y = f2), color = "yellow") +
geom_point(data = createArchiveDF(archiveList[[7]]), aes(x = f1, y = f2), color = "brown") +
geom_point(data = createArchiveDF(archiveList[[8]]), aes(x = f1, y = f2), color = "cyan") +
geom_point(data = createArchiveDF(archiveList[[9]]), aes(x = f1, y = f2), color = "grey") +
geom_point(data = createArchiveDF(archiveList[[10]]), aes(x = f1, y = f2), color = "darkgreen") +
xlab('f1') +
ylab('f2')
archiveDFTest <- createArchiveDF(archive)
plotParetoFront(archive)
# PLotly examples:
set.seed(955)
# Make some noisily increasing data
dat <- data.frame(cond = rep(c("A", "B"), each=10),
xvar = 1:20 + rnorm(20,sd=3),
yvar = 1:20 + rnorm(20,sd=3))
p <- ggplot(dat, aes(x=xvar, y=yvar)) +
geom_point(shape=1)      # Use hollow circles
p <- ggplotly(p)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="geom_point/scatter")
chart_link
# Visualise the extreme points: ------------
archiveDFPareto <- createArchiveDF(archive)
archiveDFParetoSA <- createArchiveDF4SA(archive)
archiveDFParetoSA <- archiveDFParetoSA[,-1]
archiveMaxf1DF <- archiveDFPareto[which.max(archiveDFPareto$f1),] # max f1
archiveMinf1DF <- archiveDFPareto[which.min(archiveDFPareto$f1),] # min f1
# min ATT, max TRT
x <- archive[[which.max(archiveDFPareto$f1)]][[3]]
# Create and plot a graph of the main network ----------
g <- createGraph(S,coords)
customGraphPlot(g,"") # Plots the road network
saveInPlotsFolder(g,"maxExtremePoint") # Saves the plot into a folder
# Adding additional edges to represent the bus routes on the road network -------
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g,"") # Plots the road network
saveInPlotsFolder(g,"maxExtremePointRoutes")
paste("TRT = ",f1_totalRouteLength(S,x), sep = "")
paste("ATT = ",f2_averageTravelTime(S,demandMatrix,x), sep = "")
paste("Routes:")
formatRoutes(x)
paste0("Routes: \n", formatRoutes2(x))
# max ATT, min TRT
x <- archive[[which.min(archiveDFPareto$f1)]][[3]]
# Create and plot a graph of the main network ----------
g <- createGraph(S,coords)
customGraphPlot(g,"") # Plots the road network
saveInPlotsFolder(g,"minExtremePoint") # Saves the plot into a folder
# Adding additional edges to represent the bus routes on the road network -------
g <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(g,"") # Plots the road network
saveInPlotsFolder(g,"minExtremePointRoutes")
paste("TRT = ",f1_totalRouteLength(S,x), sep = "")
paste("ATT = ",f2_averageTravelTime(S,demandMatrix,x), sep = "")
paste("Routes:")
formatRoutes(x)
paste0("Routes: \n", formatRoutes2(x))
# Visualise SA example: --------
i <- 1
g <- createGraph(S,coords)
if(i == 1){
x <- generateFeasibleSolution(shortenedCandidateRoutes,numAllowedRoutes,nrow(S),10000) # first initial solution
} else {
x <- makeSmallChange(x,N,minNodes,maxNodes)
}
# Create and plot a graph of the main network ----------
#customGraphPlot(g,"") # Plots the road network
#saveInPlotsFolder(g,paste("examplePlot",i,sep = "")) # Saves the plot into a folder
# Adding additional edges to represent the bus routes on the road network -------
gbus <- addAdditionalEdges(g,x) # adding the bus network routes
customGraphPlot(gbus,"") # Plots the road network
# saveInPlotsFolder(gbus,paste("examplePlot",i,sep = ""))
paste("TRT = ",f1_totalRouteLength(S,x)," min", sep = "")
paste("ATT = ",round(f2_averageTravelTime(S,demandMatrix,x),2)," min", sep = "")
paste("Routes:")
formatRoutes(x)
minRoutesTRT <- archive[[which.min(archiveDFPareto$f1)]][[1]]
minRoutesATT <- archive[[which.min(archiveDFPareto$f1)]][[2]]
maxRoutesTRT <- archive[[which.max(archiveDFPareto$f1)]][[1]]
maxRoutesATT <- archive[[which.max(archiveDFPareto$f1)]][[2]]
paste("TRT = ",minRoutesTRT," min", sep = "")
paste("ATT = ",round((minRoutesATT),2)," min", sep = "")
paste("TRT = ",maxRoutesTRT," min", sep = "")
paste("ATT = ",round((maxRoutesATT),2)," min", sep = "")
x_routes_min <- archive[[which.min(archiveDFPareto$f1)]][[3]]
x_routes_max <- archive[[which.max(archiveDFPareto$f1)]][[3]]
formatRoutes3(x_routes_min,x_routes_max)
###### THESIS FUNCTIONS #######
customGraphPlotThesis <- function(g, coords, titleName, print_edge_labels){
if(missing(titleName)){
titleName <- ""
}
plot(g,
# === vertex
vertex.size=13,
vertex.color="lightgrey",
vertex.frame.color="black",
# === vertex label
vertex.label.color="black",
#vertex.label.family="Serif", # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.cex=1.2,
# === edge
edge.width = E(g)$width,
edge.arrow.size=0.3,
#edge.curved = 0.1,
# === edge label
edge.label.cex = 1.2,
edge.label.color="black",
#edge.label.family="Serif",
edge.label = ifelse(print_edge_labels, E(g)$weight, ""),
# layout
layout = coords,
main = titleName)
} # end customGraphPlotThesis
plot_and_save_route_set_thesis <- function(routes_str, fileName, dist_mx, demand_mx, coords_mx){
# function to save a normal plot in a folder
g <- createGraph(dist_mx,coords_mx)
R_routes = convertRouteStringToList(routes_str)
for(i in 1:length(R_routes)){
for (j in 1:length(R_routes[[i]])){
R_routes[[i]][j] = R_routes[[i]][j] + 1
}
}
g_R <- addAdditionalEdges(g,R_routes) # adding the bus network routes
# names(pdfFonts())
pdf(file=paste("./Thesis_plots/",paste(fileName, "pdf", sep = ".")), height = 7, width = 7)
customGraphPlotThesis(g_R, coords, "", FALSE) # Plots the road network
dev.off()
} # end plot_and_save_route_set_thesis
###### INPUT ROUTES ######
pdf(file=paste("./Thesis_plots/",paste("UTRP_TRANSIT_NETWORK_plot", "pdf", sep = ".")), height = 7, width = 7) # fonts = "fontcm"
g <- createGraph(dist_mx,coords_mx)
customGraphPlotThesis(g, coords, "", TRUE) # Plots the road network
dev.off()
plot_and_save_route_set_thesis("0-1-4-3-5-14-6-9-13*0-1-2-5-7-9-13-12-10-11*0-1-2-5-7-14-6-9-10-12*8-14-6-9-10-11-3-1-0*0-1-2-5-14-8*2-1-4-3-5-7-9-10-12*",
"UTRP_DBMOSA_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-10-9-6-14-7-5-2-1*0-1*1-3-4*8-14*11-10*13-12*",
"UTRP_DBMOSA_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-13-9-6-14-5-2-1-0*0-1-3-11-10-12*11-10-9-6-14-8*0-1-4-3-5-7-14-6*10-9-7-5-3-4*0-1-2-5-7-9-10-12-13*",
"UTRP_NSGAII_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("10-11*3-1-2-5-7-14-6-9-10-12*13-12*0-1*14-8*3-4*",
"UTRP_NSGAII_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("4-3-1*13-12*8-14*9-10-12*9-6-14-7-5-2-1-0*10-11*",
"John_2016_best_operator_obj",
S, demandMatrix, coords)
problemName <- "Mandl_Data" # NB copy this from the folders as it is used in file names
# Create the folder for the results to be stored
resultsDir = paste("./Results/Results_",substr(Sys.time(),1,10),"_",problemName,"_","Routes_0", sep = "")
resultsDir = createResultsDirectory(resultsDir) # creates a new results directory
# Enter the number of allowed routes
numAllowedRoutes <- 6 # (aim for > [numNodes N ]/[maxNodes in route])
minNodes <- 3 # minimum nodes in a route
maxNodes <- 10 # maximum nodes in a route
# Set if archives, workspaces should be saved or loaded
loadArchive <- FALSE
loadWorkspace <- FALSE
saveArchive <- TRUE
saveWorkspace <- TRUE
loadSpecificArchive <- FALSE
loadSpecificWorkspace <- FALSE
initialiseTemperature <- TRUE
optimiseFurther <- TRUE
# 1.) Load the appropriate files and data for the network ------------
# Create and format a distance matrix S
S <- read.csv(paste("./Input_Data/",problemName,"/Distance_Matrix.csv", sep=""))
S <- formatDistMatrix(S)
# Create and format the demand matrix
demandMatrix <- read.csv(paste("./Input_Data/",problemName,"/OD_Demand_Matrix.csv", sep=""))
demandMatrix <- formatDemandMatrix(demandMatrix)
# Collect the correct co-ordinates of the graph
# coords <- layout.auto(g) # to generate coordinates for graph automatically
# write.csv(coords,"MandlSwissNetworkCoords.csv") # use this to store the coords
coords <- read.csv(file = paste("./Input_Data/",problemName,"/Node_Coords.csv", sep=""))
coords <- as.matrix(coords)
# Format the routes in the correct format -------
formattedRoutes <- formatRoutes(x)
# Format a Matrix for latex
RMatrix <- demandMatrix
formatMatrix(RMatrix)
coords <- read.csv(file = "./Input_Data/Mandl_Data/Node_Coords.csv")
coords <- as.matrix(coords)
customGraphPlotThesis <- function(g, coords, titleName, print_edge_labels){
if(missing(titleName)){
titleName <- ""
}
plot(g,
# === vertex
vertex.size=13,
vertex.color="lightgrey",
vertex.frame.color="black",
# === vertex label
vertex.label.color="black",
#vertex.label.family="Serif", # Font family of the label (e.g.“Times”, “Helvetica”)
vertex.label.cex=1.2,
# === edge
edge.width = E(g)$width,
edge.arrow.size=0.3,
#edge.curved = 0.1,
# === edge label
edge.label.cex = 1.2,
edge.label.color="black",
#edge.label.family="Serif",
edge.label = ifelse(print_edge_labels, E(g)$weight, ""),
# layout
layout = coords,
main = titleName)
} # end customGraphPlotThesis
plot_and_save_route_set_thesis <- function(routes_str, fileName, dist_mx, demand_mx, coords_mx){
# function to save a normal plot in a folder
g <- createGraph(dist_mx,coords_mx)
R_routes = convertRouteStringToList(routes_str)
for(i in 1:length(R_routes)){
for (j in 1:length(R_routes[[i]])){
R_routes[[i]][j] = R_routes[[i]][j] + 1
}
}
g_R <- addAdditionalEdges(g,R_routes) # adding the bus network routes
# names(pdfFonts())
pdf(file=paste("./Thesis_plots/",paste(fileName, "pdf", sep = ".")), height = 7, width = 7)
customGraphPlotThesis(g_R, coords, "", FALSE) # Plots the road network
dev.off()
} # end plot_and_save_route_set_thesis
pdf(file=paste("./Thesis_plots/",paste("UTRP_TRANSIT_NETWORK_plot", "pdf", sep = ".")), height = 7, width = 7) # fonts = "fontcm"
g <- createGraph(dist_mx,coords_mx)
customGraphPlotThesis(g, coords, "", TRUE) # Plots the road network
dev.off()
pdf(file=paste("./Thesis_plots/",paste("UTRP_TRANSIT_NETWORK_plot", "pdf", sep = ".")), height = 7, width = 7) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotThesis(g, coords, "", TRUE) # Plots the road network
dev.off()
plot_and_save_route_set_thesis("0-1-4-3-5-14-6-9-13*0-1-2-5-7-9-13-12-10-11*0-1-2-5-7-14-6-9-10-12*8-14-6-9-10-11-3-1-0*0-1-2-5-14-8*2-1-4-3-5-7-9-10-12*",
"UTRP_DBMOSA_ATT_MIN",
S, demandMatrix, coords)
# DSS Main
# Load Libraries -------
list.of.packages <- c( "rstudioapi","ggplot2", "igraph","png","plotly","PythonInR","ecr","tidyverse") # list of packages to use
new_packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # IDs new packages
if(length(new_packages)>0){install.packages(new_packages)} #installs the new packages if required
lapply(list.of.packages, library, character.only = TRUE) # load the required packages
rm(list.of.packages,new_packages) # removes the list created
# Set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # gets and sets the directory of the current script
# Load other functions and scripts -------
source("./DSS_Functions.R")
source("./DSS_Admin_Functions.R")
source("./DSS_Visualisation_Functions.R")
source('C:/Users/17832020/OneDrive - Stellenbosch University/Academics 2019 MEng/DSS/DSS Main/Extra Scripts/R_Scripts_DSS/DSS_Visualisation_Post_Python.R')
pdf(file=paste("./Thesis_plots/",paste("UTRP_TRANSIT_NETWORK_plot", "pdf", sep = ".")), height = 7, width = 7) # fonts = "fontcm"
g <- createGraph(S,coords)
customGraphPlotThesis(g, coords, "", TRUE) # Plots the road network
dev.off()
plot_and_save_route_set_thesis("0-1-4-3-5-14-6-9-13*0-1-2-5-7-9-13-12-10-11*0-1-2-5-7-14-6-9-10-12*8-14-6-9-10-11-3-1-0*0-1-2-5-14-8*2-1-4-3-5-7-9-10-12*",
"UTRP_DBMOSA_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-10-9-6-14-7-5-2-1*0-1*1-3-4*8-14*11-10*13-12*",
"UTRP_DBMOSA_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("12-13-9-6-14-5-2-1-0*0-1-3-11-10-12*11-10-9-6-14-8*0-1-4-3-5-7-14-6*10-9-7-5-3-4*0-1-2-5-7-9-10-12-13*",
"UTRP_NSGAII_ATT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("10-11*3-1-2-5-7-14-6-9-10-12*13-12*0-1*14-8*3-4*",
"UTRP_NSGAII_TRT_MIN",
S, demandMatrix, coords)
plot_and_save_route_set_thesis("4-3-1*13-12*8-14*9-10-12*9-6-14-7-5-2-1-0*10-11*",
"John_2016_best_operator_obj",
S, demandMatrix, coords)
source('C:/Users/17832020/OneDrive - Stellenbosch University/Academics 2019 MEng/DSS/DSS Main/Extra Scripts/R_Scripts_DSS/DSS_Visualisation_Post_Python.R')
